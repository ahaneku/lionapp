package ng.edu.unnportal.com.lionapp;import ng.edu.unn.UnnParser.UnnParser;import ng.edu.unn.UnnParser.UnnParser.UnnFeed;import org.xmlpull.v1.XmlPullParser;import org.xmlpull.v1.XmlPullParserException;import java.io.IOException;import java.io.InputStream;import java.io.BufferedInputStream;import java.io.FileInputStream;import java.net.URL;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.lang.StringBuilder;import java.util.List;import java.util.ArrayList;import android.content.Context;import android.util.Xml;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;public class Parser {    public final static String sagefour_com = "http://www.sagefour.com/feeds/posts/default";    private InputStream is = null;    private StringBuilder feeds = null;    private XmlPullParser xmlParser = null;    private Context context = null;    public Parser(Context context){        this.context = context;    }   /* //retrives sagefour inStream    public InputStream getSagefourInputStream(String site) throws IOException{        HttpURLConnection httpUrl = null;        URL sagefourURL = null;            sagefourURL = new URL(site);            httpUrl = (HttpURLConnection) sagefourURL.openConnection();            httpUrl.setReadTimeout(15000);            httpUrl.setConnectTimeout(20000);            httpUrl.setRequestMethod("GET");            httpUrl.connect();            if(httpUrl.getResponseCode() == HttpURLConnection.HTTP_OK){                is = httpUrl.getInputStream();            }        return is;    }    //retrives sagefour news    public List<UnnFeed> getSagefourFeeds(InputStream is)throws IOException, XmlPullParserException{        try{            xmlParser = Xml.newPullParser();            xmlParser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);            xmlParser.setInput(is, null);            xmlParser.nextTag();            return getFeeds(xmlParser);        }finally{            if(is != null){                is.close();            }        }    }    public List<UnnFeed> getFeeds(XmlPullParser xmlParser)throws IOException, XmlPullParserException{        List<UnnFeed> feed = new ArrayList<>();        xmlParser.require(XmlPullParser.START_TAG, null, "feed");        while(xmlParser.next() != XmlPullParser.END_TAG){                if(xmlParser.getEventType() != XmlPullParser.START_TAG){                    continue;                }            String name = xmlParser.getName();            if(name.equals("entry")){                feed.add(getEntry(xmlParser));            }            else{                skip(xmlParser);            }        }        return feed;    }    //gets Entries from sagefourFeed    public Feed getEntry(XmlPullParser xmlParser)throws IOException, XmlPullParserException{        String feedTitle = null;        String feedContent = null;        String feedImgLink = null;        Bitmap feedImg = null;        String feedDate = null;        xmlParser.require(XmlPullParser.START_TAG, null, "entry");        while(xmlParser.next() != XmlPullParser.END_TAG){            if(xmlParser.getEventType() != XmlPullParser.START_TAG){                continue;            }            String name = xmlParser.getName();            if(name.equals("title")){                feedTitle = readTitle(xmlParser);            }            else if(name.equals("content")){                feedContent = readContent(xmlParser);            }else if(name.equals("link")){                feedImgLink = readLink(xmlParser);            }            else{                skip(xmlParser);            }        }        return new Feed(feedTitle, feedContent, feedImgLink, feedDate);    }    //reads titles from sagefour Feed    public String readTitle(XmlPullParser xmlParser)throws IOException, XmlPullParserException{        String feedTitle = "";        xmlParser.require(XmlPullParser.START_TAG, null, "title");        feedTitle = readText(xmlParser);        xmlParser.require(XmlPullParser.END_TAG, null, "title");        return feedTitle;    }    //reads content from sagefour Feed    public String readContent(XmlPullParser xmlParser) throws IOException, XmlPullParserException{        String feedContent = "";        xmlParser.require(XmlPullParser.START_TAG, null, "content");        feedContent = readText(xmlParser);        xmlParser.require(XmlPullParser.END_TAG, null, "content");        return feedContent;    }    //reads feed Img Link    public String readLink(XmlPullParser xmlParser) throws IOException, XmlPullParserException{        String tag = "";        String href = null;        xmlParser.require(XmlPullParser.START_TAG, null, "link");        tag = xmlParser.getName();        String alternate = xmlParser.getAttributeValue(null, "rel");        if(tag.equals("link")){             href = xmlParser.getAttributeValue(null, "href");            xmlParser.nextTag();        }        xmlParser.require(XmlPullParser.END_TAG, null, "link");        return href;    }    //reads feed Img Link    public Bitmap readLink(XmlPullParser xmlParser, Bitmap bitM) throws IOException, XmlPullParserException{        String tag = "";        String href = null;        Bitmap feedImgIn = null;        xmlParser.require(XmlPullParser.START_TAG, null, "link");        tag = xmlParser.getName();        String alternate = xmlParser.getAttributeValue(null, "rel");        if(tag.equals("link")){            href = xmlParser.getAttributeValue(null, "href");            feedImgIn = BitmapFactory.decodeStream((InputStream)new URL(href).getContent());            xmlParser.nextTag();        }        xmlParser.require(XmlPullParser.END_TAG, null, "link");        return feedImgIn;    }    //reads text from sagefour Feed    public String readText(XmlPullParser xmlParser)throws IOException, XmlPullParserException{        String text = "";        if(xmlParser.next() == XmlPullParser.TEXT){            text = xmlParser.getText();            xmlParser.nextTag();        }        return text;    }    //skips tags in sagefour Feed    public void skip(XmlPullParser xmlParser) throws IOException, XmlPullParserException{        if(xmlParser.getEventType() != XmlPullParser.START_TAG){            throw new IllegalStateException();        }        int depth = 1;        while(depth != 0){            switch(xmlParser.next()){                case XmlPullParser.END_TAG :                    depth--;                    break;                case XmlPullParser.START_TAG :                    depth++;                    break;            }        }    } */}