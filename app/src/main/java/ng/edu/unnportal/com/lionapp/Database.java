package ng.edu.unnportal.com.lionapp;import ng.edu.unn.UnnParser.UnnParser;import ng.edu.unn.UnnParser.UnnParser.UnnFeed;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.database.Cursor;import android.content.ContentValues;import android.content.Context;import android.util.Log;import java.util.List;import java.util.ArrayList;public class Database {    public static final String DATABASE_NAME = "com.ng.edu.unn.db";    public static int DATABASE_VERSION = 1;    public static final String TABLE_NAME = "_unn_feeds";    public static final String ID_COLUMN = "_id";    public static final String POST_ID_COLUMN = "_post_id";    public static final String POST_TITLE_COLUMN = "_post_title";    public static final String POST_CONTENT_COLUMN = "_post_content";    public static final String POST_DATE_COLUMN = "_post_date";    public static final String POST_IMG_URL="_img_url";    public static final String SQL_CREATE = "CREATE TABLE "+TABLE_NAME+"(" +           // ID_COLUMN + "TEXT PRIMARY KEY AUTOINCREMENT,"+            POST_ID_COLUMN +" TEXT NOT NULL," +            POST_TITLE_COLUMN +" TEXT NOT NULL," +            POST_CONTENT_COLUMN +" TEXT NOT NULL," +            POST_DATE_COLUMN +" TEXT NOT NULL," +            POST_IMG_URL +" TEXT " +            ")";    public static final String SQL_DELETE = "DROP TABLE IF EXISTS "+TABLE_NAME;    private Context context;    private static Database database;    private SQLiteDatabase db;    private DatabaseManager dbm;    private Settings settings;    private static List<UnnParser.UnnFeed>  unnFeed;    protected Database(Context context){        this.context = context;        dbm = new DatabaseManager();        settings = new Settings(context);    }    public static Database getInstance(Context context){        if(database == null){            database = new Database(context);            unnFeed = new ArrayList<>();        }       return database;    }                                                            //method to add feed into the database...    public boolean addFeeds(List<UnnParser.UnnFeed> unnFeed){        this.unnFeed = unnFeed;        if(LionApp.database_content_state){            this.update();        }else if(!LionApp.database_content_state){            LionApp.database_content_state =  true;            Log.e("Cjay", "after adding data to db 1st : "                    +String.valueOf(settings.getUserParamValue(Settings.DATABASE_COUNT, null)));         }        db = dbm.getWritableDatabase();        ContentValues values = new ContentValues();        long res = 0;        for(UnnParser.UnnFeed feed : this.unnFeed){            values.put(POST_ID_COLUMN, feed.getId());            values.put(POST_TITLE_COLUMN, feed.getTitle());            values.put(POST_CONTENT_COLUMN, feed.getContent());            values.put(POST_DATE_COLUMN, feed.getDate());            values.put(POST_IMG_URL, feed.getImgLink());            res = db.insert(TABLE_NAME, null, values);        }        closeDb();        if(res != -1 ){            return true;        }else{            return false;}}                                                //method to get all feeds in database...    public List<UnnFeed> getFeeds(){        db = dbm.getReadableDatabase();        Cursor feeds;        List<UnnParser.UnnFeed> unnFeeds = new ArrayList<>();        feeds = db.query(Database.TABLE_NAME, new String[]{POST_ID_COLUMN,        POST_TITLE_COLUMN, POST_CONTENT_COLUMN, POST_DATE_COLUMN, POST_IMG_URL}, null, null, null, null, null);        feeds.moveToFirst();        if(!feeds.moveToFirst()){            return null;        }        while(feeds.moveToNext()){            String tempId = feeds.getString(feeds.getColumnIndexOrThrow(POST_ID_COLUMN));            String tempTitle = feeds.getString(feeds.getColumnIndexOrThrow(POST_TITLE_COLUMN));            String tempContent = feeds.getString(feeds.getColumnIndexOrThrow(POST_CONTENT_COLUMN));            String tempDate = feeds.getString(feeds.getColumnIndexOrThrow(POST_DATE_COLUMN));            String tempImgUrl = feeds.getString(feeds.getColumnIndexOrThrow(POST_IMG_URL));            unnFeeds.add(new UnnFeed(tempId, tempTitle, tempContent, null, tempDate));        }        if(null != feeds){            feeds.close();            closeDb();        }        return unnFeeds;    }                                        //updates the database    public void update(){        db = dbm.getWritableDatabase();        dbm.onUpgrade(db, DATABASE_VERSION, ++DATABASE_VERSION);    }                                //method to close database...    public void closeDb(){        if(null != db){            db.close();        }    }    public boolean checkId(String Id){        db = dbm.getWritableDatabase();        Cursor cursor;        cursor = db.query(TABLE_NAME, new String[]{POST_ID_COLUMN}, "POST_ID_COLUMN = ?", new String[]{Id}, null, null, null);        if(!cursor.moveToFirst()){            return false;        }else {            String check_id_temp = cursor.getString(cursor.getColumnIndex(POST_ID_COLUMN));            Log.e("Cjay", "post id check : " + check_id_temp + "... intake id : " + Id);            if (Id.equals(check_id_temp)) {                return true;            }        }        return false;    }    private class DatabaseManager extends SQLiteOpenHelper {        DatabaseManager(){            super(context, Database.DATABASE_NAME, null, Database.DATABASE_VERSION);        }        @Override        public void onCreate(SQLiteDatabase db){            db.execSQL(SQL_CREATE);        }        @Override        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion){            db.execSQL(SQL_DELETE);            onCreate(db);        }         }}