package ng.edu.unnportal.com.lionapp;import ng.edu.unn.UnnParser.UnnParser;import ng.edu.unn.UnnParser.UnnParser.UnnFeed;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.preference.PreferenceManager;import android.support.annotation.Nullable;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v4.view.MenuItemCompat;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.Menu;import android.view.MenuItem;import android.widget.TextView;import android.os.AsyncTask;import android.widget.ProgressBar;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.support.v7.app.AppCompatDialog;import android.support.v7.app.AlertDialog.Builder;import android.support.v7.app.AlertDialog;import android.support.design.widget.NavigationView;import android.support.v4.view.GravityCompat;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v4.widget.DrawerLayout;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.RecyclerView.LayoutManager;import android.support.v7.widget.LinearLayoutManager;import java.io.File;import java.util.ArrayList;import java.util.List;import java.io.InputStream;import android.view.Window;import android.widget.Toast;import android.graphics.Color;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import com.squareup.picasso.Picasso;import android.support.v4.content.LocalBroadcastManager;import android.provider.Settings;public class LionApp extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {    public static final String DOWNLOAD_STATE_KEY = "download_state_key";    public static final String DATA_TO_PERSIST = "1100";    public static final int USER_IMG_ID = 1000;    public static final int ON_COLOR = Color.GREEN;    public static final String GET_FROM_DB = "getfromdb";    public static final String GET_FROM_URL = "getfromurl";    public static final String TITLE = "title";    public static final String CONTENT = "content";    public static final String IMG = "image";    public static final String DATE = "date";    private MenuItem progressItem;    private DrawerLayout drawer;    private NavigationView navigation;    private ng.edu.unnportal.com.lionapp.Adapter mAdapter = null;    private RecyclerView recycleView;    private LayoutManager layoutMan;    private List<UnnFeed> unnFeed;    private TextView emptyDb;    public static FloatingActionButton userImg;    public static TextView userName;    public static TextView userDepartment;    private ProgressBar progress;    private AppCompatDialog dialog;    private Builder builder;    private UnnParser unnParser;    private Database db;    private Animation fadeIn;    private FloatingActionButton fab;    private ng.edu.unnportal.com.lionapp.Settings settings;    private LocalBroadcastManager lbm;    public static boolean downloadState_getFeeds = false;    public static boolean database_content_state = false;    @Override    protected void onCreate(Bundle savedInstanceState) {        supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);        super.onCreate(savedInstanceState);        setContentView(R.layout.drawer_layout);        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        //toolbar.setLogo(R.drawable.ic_launcher);        setSupportActionBar(toolbar);        if(null != savedInstanceState){            LionApp.downloadState_getFeeds = savedInstanceState.getBoolean(LionApp.DOWNLOAD_STATE_KEY);        }        fadeIn = AnimationUtils.loadAnimation(this, R.anim.fade_in);        drawer = (DrawerLayout) findViewById(R.id.drawer);        ActionBarDrawerToggle abdt = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigationDrawer_open, R.string.navigationDrawer_close);        drawer.setDrawerListener(abdt);        abdt.syncState();        recycleView = (RecyclerView) findViewById(R.id.feedsView);        progress = (ProgressBar) findViewById(R.id.progress);        navigation = (NavigationView) findViewById(R.id.navigation);        emptyDb = (TextView) findViewById(R.id.emptyDb);        //inflates nav header        navigation.setNavigationItemSelectedListener(this);        navigation.setItemTextAppearance(android.R.style.TextAppearance_Material_Medium);        navigation.setRotation(1.2f);        progress.setVisibility(View.GONE);        inflateNavHeader(getLayoutInflater());        recycleView.setHasFixedSize(true);        recycleView.setAnimation(fadeIn);        layoutMan = new LinearLayoutManager(this);        recycleView.setLayoutManager(layoutMan);        fab = (FloatingActionButton) findViewById(R.id.fab);        fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Snackbar.make(view, "Send a mail to ICT?", Snackbar.LENGTH_LONG)                        .setAction("Action", null).show();            }        });        //retrives an instance of database..        db = Database.getInstance(getBaseContext());        settings = new ng.edu.unnportal.com.lionapp.Settings(getBaseContext());        /*starts the execution of unnFeeds retrival...            *            */        getData();    }                                                    //inflates navHeaderLayout...    public void inflateNavHeader(LayoutInflater inflater){        View headerLayout = navigation.getHeaderView(0);        userImg = (FloatingActionButton) headerLayout.findViewById(R.id.userImage);        userName = (TextView) headerLayout.findViewById(R.id.userName);        userDepartment = (TextView) headerLayout.findViewById(R.id.userDepartment);        userImg.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent im = new Intent(Intent.ACTION_GET_CONTENT);                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {                    im.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);                }                im.addCategory(Intent.CATEGORY_OPENABLE);                im.setType("image/*");                startActivityForResult(im, LionApp.USER_IMG_ID);            }        });    }    @Override    public void onStart() {        super.onStart();        lbm = LocalBroadcastManager.getInstance(getBaseContext());        IntentFilter updateFilter = new IntentFilter();        updateFilter.addAction(IService.UPDATE_ACTION);        lbm.registerReceiver(UiUpdate, updateFilter);        if(db == null){            db = Database.getInstance(getBaseContext());        }    }    @Override    public void onStop() {        super.onStop();        lbm.unregisterReceiver(UiUpdate);        lbm = null;        db = null;    }    //receives broadcast to change current UI Feed...    BroadcastReceiver UiUpdate = new BroadcastReceiver(){        @Override        public void onReceive(Context context, Intent intent){            boolean update_state = intent.getBooleanExtra(IService.EXTRA_UPDATE_STATE, false);            if(update_state){              //  LionApp.downloadState_getFeeds = false;                String extra_from = intent.getStringExtra(IService.EXTRA_FROM);                Feed uf = intent.getParcelableExtra(IService.EXTRA_UNN_FEEDS);                unnFeed = uf.getUnnFeed();                if(extra_from.equals(LionApp.GET_FROM_URL)){                          settings.setUserParamValue(ng.edu.unnportal.com.lionapp.Settings.DATABASE_COUNT                                ,"HasContent");                  //  if(active()){                        mAdapter = new ng.edu.unnportal.com.lionapp.Adapter(unnFeed, new ViewFeedListener() {                            @Override                            public void viewFeed(UnnParser.UnnFeed feed) {                                showDetails(feed);                            }                        }, LionApp.GET_FROM_URL, getBaseContext());                  //  }                    hideProgress();                }else if(extra_from.equals(LionApp.GET_FROM_DB)){                    mAdapter = new ng.edu.unnportal.com.lionapp.Adapter(unnFeed, new ViewFeedListener() {                        @Override                        public void viewFeed(UnnParser.UnnFeed feed) {                            showDetails(feed);                        }                    }, LionApp.GET_FROM_DB, getBaseContext());                }                closeDrawer();                recycleView.setAdapter(mAdapter);                //fadeIn.start();                progress.setVisibility(View.GONE);                emptyDb.setText(getResources().getString(R.string.empty_db));                emptyDb.setVisibility(View.GONE);            }else{              //  LionApp.downloadState_getFeeds = false;                progress.setVisibility(View.GONE);                emptyDb.setText(getResources().getString(R.string.empty_db));                String _error = intent.getStringExtra(IService.EXTRA_UNN_ERROR);                Snackbar.make(fab, _error, Snackbar.LENGTH_LONG).setAction(                        getResources().getString(R.string.try_again), new View.OnClickListener(){                            @Override                    public void onClick(View  v){                        getData();                    }                        });            /*    showState(fab, _error,                        getResources().getString(R.string.on_connect), LionApp.ON_COLOR);  */            }        }    };    @Override    public void onActivityResult(int request, int result, Intent intent) {        if (request == LionApp.USER_IMG_ID && result == RESULT_OK) {            File UserImg = new File(intent.getData().toString());            Picasso.with(this).load(UserImg).resize(78, 78).into(userImg);        }    }    @Override    public void onSaveInstanceState(Bundle dataToPersist){     //   UnnFeed [] savedFeeds = null;      //  savedFeeds = (UnnFeed[]) unnFeed.toArray(new UnnFeed[unnFeed.size()]);       /* Feed f = new Feed(unnFeed);        ArrayList<Feed> savedFeeds = new ArrayList<>();        savedFeeds.add(f);        dataToPersist.putParcelableArrayList(DATA_TO_PERSIST, savedFeeds);  */        dataToPersist.putBoolean(LionApp.DOWNLOAD_STATE_KEY, LionApp.downloadState_getFeeds);        super.onSaveInstanceState(dataToPersist);    }    @Override    public void onRestoreInstanceState(Bundle dataFromLastState){        super.onRestoreInstanceState(dataFromLastState);        LionApp.downloadState_getFeeds = dataFromLastState.getBoolean(LionApp.DOWNLOAD_STATE_KEY);    }    //method to retrive data    public void getData() {       // if (mAdapter == null) {        progress.setVisibility(View.VISIBLE);        emptyDb.setText(getResources().getString(R.string.loading_data));       // }            String database_content_state =  settings.getUserParamValue(                    ng.edu.unnportal.com.lionapp.Settings.DATABASE_COUNT, String.valueOf("null"));        Log.e("Cjay", "count state : "+database_content_state);        if (database_content_state.equals("HasContent")) {            Intent serviceDb = new Intent(LionApp.this, IService.class);            serviceDb.putExtra(IService.FROM, LionApp.GET_FROM_DB);            startService(serviceDb);            //new UnnTask().execute(LionApp.GET_FROM_DB);        } else if (settings.checkNetwork()) {            Log.e("Cjay", "getting from netwrk...");                Intent serviceUrl = new Intent(LionApp.this, IService.class);                serviceUrl.putExtra(IService.FROM, LionApp.GET_FROM_URL);                drawer.openDrawer(GravityCompat.START);                startService(serviceUrl);              //  LionApp.downloadState_getFeeds = true;                //new UnnTask().execute(LionApp.GET_FROM_URL);        } else {            emptyDb.setText(getResources().getString(R.string.empty_db));            //emptyDb.setVisibility(View.VISIBLE);            showState(fab, getResources().getString(R.string.no_connect), getResources().getString(R.string.on_connect)                    , LionApp.ON_COLOR);        }    }    //method to show feeds detail    public void showDetails(UnnFeed feed) {        Feed uf = new Feed(unnFeed);     /*   Bundle args = new Bundle();        args.putParcelable(IService.EXTRA_UNN_FEEDS, uf); */      /*  args.putString(LionApp.IMG, feed.getImgLink());        args.putString(LionApp.TITLE, feed.getTitle());        args.putString(LionApp.CONTENT, feed.getContent());        args.putString(LionApp.DATE, feed.getDate());  */        Intent detailIntent = new Intent(LionApp.this, DetailActivity.class);        detailIntent.putExtra(DetailActivity.FEED, uf);        startActivity(detailIntent);       // args = null;    }    @Override    public boolean onPrepareOptionsMenu(Menu menu){        return true;    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_lion_app, menu);        progressItem =  menu.findItem(R.id.action_progress);        return false;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        return super.onOptionsItemSelected(item);    }    @Override    public void onBackPressed() {        if (drawer.isDrawerOpen(GravityCompat.START)) {            drawer.closeDrawer(GravityCompat.START);        } else {            super.onBackPressed();        }    }    @Override    public boolean onNavigationItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.unn_news:                            closeDrawer();                           // if(!LionApp.downloadState_getFeeds){                                if (settings.checkNetwork()) {                                    if (mAdapter == null) {                                        progress.setVisibility(View.VISIBLE);                                        emptyDb.setText(getResources().getString(R.string.loading_data));                                    }else{                                        showProgress();                                    }                                  //  LionApp.downloadState_getFeeds = true;                                    Intent serviceUrl = new Intent(LionApp.this, IService.class);                                    serviceUrl.putExtra(IService.FROM, LionApp.GET_FROM_URL);                                    startService(serviceUrl);                                  //  new UnnTask().execute(LionApp.GET_FROM_URL)                                    return true;                                }else{                                  //  LionApp.downloadState_getFeeds = false;                                    emptyDb.setText(getResources().getString(R.string.empty_db));                                    progress.setVisibility(View.GONE);                                    showState(fab, getResources().getString(R.string.no_connect),                                            getResources().getString(R.string.on_connect), LionApp.ON_COLOR);                                    return true;                                }                           // }else{                              /*  Toast.makeText(getBaseContext(), "ongoing download already...", Toast.LENGTH_SHORT).show();                                closeDrawer();                                return true;  */                           // }            case R.id.profileEdit :                            closeDrawer();                            Intent userProfileAct = new Intent(LionApp.this, UserProfileActivity.class);                            startActivity(userProfileAct);                            return true;            case R.id.about :                            closeDrawer();                            showAbout();                            return true;            case R.id.settings:                            return true;            case R.id.exit : finish();                            return true;            default:                            return false;        }    }    public interface ViewFeedListener{        void viewFeed(UnnFeed feed);    }    //class to compress image bitmap    public static class DecodeImage {        DecodeImage() {        }        public Bitmap DecodeSampleBitmap(InputStream stream, int reqWidth, int reqHeight) {            Log.e("Cjay", "image url to download from : " + stream.toString());            BitmapFactory.Options options = new BitmapFactory.Options();            options.inJustDecodeBounds = true;            BitmapFactory.decodeStream(stream, null, options);            options.inSampleSize = CalculateInSampleSize(options, reqWidth, reqHeight);            options.inJustDecodeBounds = false;            return BitmapFactory.decodeStream(stream, null, options);        }        private int CalculateInSampleSize(BitmapFactory.Options opts, int reqWidth, int reqHeight) {            int width = opts.outWidth;            int height = opts.outHeight;            Log.e("Cjay", "image height : " + height + "...img width : " + width);            int inSampleSize = 1;            if (width > reqWidth || height > reqHeight) {                int halfWidth = width / 2;                int halfHeight = height / 2;                while ((halfWidth / inSampleSize) > reqWidth && (halfHeight / inSampleSize) > reqHeight) {                    inSampleSize *= 2;                }            }            return inSampleSize;        }    }                            //shows about the LionApp    public void showAbout(){                            Builder aboutDialog = new AlertDialog.Builder(this);                            aboutDialog.setTitle(getResources().getString(R.string.app_name)+" "                                    +"1.0");                            aboutDialog.setMessage("Brought to you by CHIJIOKE.");                            aboutDialog.setIcon(R.mipmap.ic_launcher);                            AppCompatDialog abt = new AppCompatDialog(getBaseContext());                            abt.supportRequestWindowFeature(Window.FEATURE_NO_TITLE);                            abt = aboutDialog.create();                            abt.show();    }    public void closeDrawer(){        if (drawer.isDrawerOpen(GravityCompat.START))            drawer.closeDrawer(GravityCompat.START);        }                                        //method to show application state in snackBar        public void showState(View from, String value, String action,  int actionColor){            Snackbar snackB = null;            if(action == null){               snackB = Snackbar.make(from, value, Snackbar.LENGTH_LONG);                snackB.show();            }            else{                snackB = Snackbar.make(from, value, Snackbar.LENGTH_LONG);                if(actionColor != -1){                    snackB.setActionTextColor(actionColor);                }                snackB.setAction(action, new View.OnClickListener() {                    @Override                    public void onClick(View v){                        Intent onNetwrk = new Intent(Settings.ACTION_WIRELESS_SETTINGS);                        if(onNetwrk.resolveActivity(getPackageManager()) != null){                            startActivity(onNetwrk);                        }                    }                });                snackB.show();            }        }    public boolean active(){        return this.hasWindowFocus();    }    public void showProgress(){        progressItem.setVisible(true);    }    public void hideProgress(){        progressItem.setVisible(false);    }}